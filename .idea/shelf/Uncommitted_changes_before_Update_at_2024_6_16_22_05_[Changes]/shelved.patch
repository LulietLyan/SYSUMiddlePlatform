Index: router/router.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package router\r\n\r\nimport (\r\n\t\"backend/control\"\r\n\t\"backend/logic\"\r\n\r\n\t\"github.com/gin-gonic/gin\"\r\n)\r\n\r\nfunc RouterInit(r *gin.RouterGroup) {\r\n\r\n\tr.Static(\"/logo\", \"./image\")\r\n\tapi := r.Group(\"api\")\r\n\t{\r\n\t\tauth := api.Group(\"/auth\")\r\n\t\t{\r\n\t\t\tauth.POST(\"/login\", control.UserLogin)\r\n\t\t\tauth.POST(\"/signup\", control.SignUp)\r\n\t\t}\r\n\r\n\t\tapi.Use(logic.AuthMiddleware()) //应该只影响后面的，如果前面的也受影响，可能是gin版本不同\r\n\t\tuser := api.Group(\"/user\")\r\n\t\t{\r\n\t\t\tuser.PUT(\"/password\", control.UpdatePassword)\r\n\t\t}\r\n\t\tmessage := api.Group(\"/message\")\r\n\t\t{\r\n\t\t\tmessage.DELETE(\"\", control.DeleteMessage)\r\n\t\t\tmessage.GET(\"\", control.GetMessage)\r\n\t\t\tmessage.GET(\"/pages\", control.GetMessagePageNum)\r\n\t\t\tmessage.POST(\"/search\", control.GetMessageSearch)\r\n\t\t\tmessage.POST(\"/search/pages\", control.GetMessagePageNumSearch)\r\n\t\t}\r\n\t\tapi.POST(\"/applyauth\", control.ApplyForTableAuth)\r\n\t\tproject := api.Group(\"/project\")\r\n\t\t{\r\n\t\t\tproject.GET(\"\", control.GetProjectBrief)\r\n\t\t\tproject.GET(\"/pages\", control.GetProjectPageNum)\r\n\t\t\tproject.POST(\"/search\", control.GetProjectBriefSearch)\r\n\t\t\tproject.POST(\"/search/pages\", control.GetProjectPageNumSearch)\r\n\t\t\tproject.POST(\"/newprojecttable\", control.NewProjectTable)\r\n\t\t\tproject.GET(\"/getprojecttable\", control.GetProjectTable)\r\n\t\t\tproject.GET(\"/getallprojecttable\", control.GetAllProjectTable)\r\n\t\t\tproject.DELETE(\"/deleteprojecttable\", control.DeleteProjectTable)\r\n\t\t}\r\n\t\tapi.POST(\"/projectdetail\", control.GetProjectDetail)\r\n\t\tapiinfo := api.Group(\"/apiinfo\")\r\n\t\t{\r\n\t\t\tapiinfo.GET(\"\", control.GetApiBrief)\r\n\t\t\tapiinfo.GET(\"/pages\", control.GetApiPageNum)\r\n\t\t\tapiinfo.POST(\"/search/pages\", control.GetApiPageNumSearch)\r\n\t\t\tapiinfo.POST(\"/search\", control.GetApiSearch)\r\n\t\t\tapiinfo.GET(\"/details\", control.GetApiDetail)\r\n\t\t\tapiinfo.POST(\"\", control.SaveApi)\r\n\t\t}\r\n\t\tdeveloper := api.Group(\"/developer/project\")\r\n\t\t{\r\n\t\t\tdeveloper.POST(\"/img\", control.UploadLogo)\r\n\t\t\tdeveloper.POST(\"/intro\", control.UpdateProjectNameDesc)\r\n\t\t\tdeveloper.POST(\"/member\", control.UpdateProjectMember)\r\n\t\t\tdeveloper.DELETE(\"/member\", control.DeleteMember)\r\n\t\t}\r\n\t\tadmin := api.Group(\"/admin\")\r\n\t\t{\r\n\t\t\tadmin.GET(\"/users\", control.GetAllUser)\r\n\t\t\tadmin.POST(\"/publish\", control.SaveNotification)\r\n\t\t\tadmin.DELETE(\"/apiinfo\", control.DeleteApi)\r\n\t\t\tadmin.GET(\"/users/details\", control.GetAllUserDetail)\r\n\t\t\tadmin.POST(\"/invitecode\", control.GenInviteCode)\r\n\t\t\tadmin.GET(\"/tables\", control.GetTable)\r\n\t\t\tadmin.POST(\"/auth\", control.UpdatePermission)\r\n\t\t\tadmin.POST(\"/auth/search\", control.GetPermission)\r\n\t\t\tadmin.GET(\"/requests/pages\", control.GetPermissionRequestNum)\r\n\t\t\tadmin.GET(\"/requests\", control.GetPermissionRequest)\r\n\t\t\tadmin.POST(\"/requests/search/pages\", control.GetPermissionRequestNumSearch)\r\n\t\t\tadmin.POST(\"/requests/search\", control.GetPermissionRequestSearch)\r\n\t\t\tadmin.POST(\"/requests/reject\", control.RejectPermissionRequest)\r\n\t\t\tadmin.POST(\"/requests/approve\", control.ApprovePermissionRequest)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunc SetupRouter() *gin.Engine {\r\n\trouter := gin.Default()\r\n\t// 添加CORS中间件\r\n\t// config := cors.DefaultConfig()\r\n\t// config.AllowOrigins = []string{\"http://localhost:2020\", \"http://localhost:8080\", \"http://localhost:8081\", \"http://localhost:8082\", \"http://localhost:8083\",\r\n\t// \t\"http://localhost:8084\", \"http://localhost:8085\"} // 允许访问的域名\r\n\t// config.AllowMethods = []string{\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"} // 允许的HTTP方法\r\n\t// router.Use(cors.New(config))\r\n\tapi := router.Group(\"\")\r\n\tRouterInit(api)\r\n\t// UserRouterInit(api)\r\n\t//NewsRouterInit(api)\r\n\t//CommentRouterInit(api)\r\n\treturn router\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/router/router.go b/router/router.go
--- a/router/router.go	(revision 835c93b1a24981205dd013d55a884a19f2310ef1)
+++ b/router/router.go	(date 1718010973151)
@@ -3,26 +3,30 @@
 import (
 	"backend/control"
 	"backend/logic"
-
 	"github.com/gin-gonic/gin"
 )
 
 func RouterInit(r *gin.RouterGroup) {
-
 	r.Static("/logo", "./image")
 	api := r.Group("api")
 	{
+		api.Use(logic.AuthMiddleware()) //应该只影响后面的，如果前面的也受影响，可能是gin版本不同
+
+		api.POST("/applyauth", control.ApplyForTableAuth)
+
+		api.POST("/projectdetail", control.GetProjectDetail)
+
 		auth := api.Group("/auth")
 		{
 			auth.POST("/login", control.UserLogin)
 			auth.POST("/signup", control.SignUp)
 		}
 
-		api.Use(logic.AuthMiddleware()) //应该只影响后面的，如果前面的也受影响，可能是gin版本不同
 		user := api.Group("/user")
 		{
 			user.PUT("/password", control.UpdatePassword)
 		}
+
 		message := api.Group("/message")
 		{
 			message.DELETE("", control.DeleteMessage)
@@ -31,7 +35,7 @@
 			message.POST("/search", control.GetMessageSearch)
 			message.POST("/search/pages", control.GetMessagePageNumSearch)
 		}
-		api.POST("/applyauth", control.ApplyForTableAuth)
+
 		project := api.Group("/project")
 		{
 			project.GET("", control.GetProjectBrief)
@@ -43,7 +47,7 @@
 			project.GET("/getallprojecttable", control.GetAllProjectTable)
 			project.DELETE("/deleteprojecttable", control.DeleteProjectTable)
 		}
-		api.POST("/projectdetail", control.GetProjectDetail)
+
 		apiinfo := api.Group("/apiinfo")
 		{
 			apiinfo.GET("", control.GetApiBrief)
@@ -53,6 +57,7 @@
 			apiinfo.GET("/details", control.GetApiDetail)
 			apiinfo.POST("", control.SaveApi)
 		}
+
 		developer := api.Group("/developer/project")
 		{
 			developer.POST("/img", control.UploadLogo)
@@ -60,6 +65,7 @@
 			developer.POST("/member", control.UpdateProjectMember)
 			developer.DELETE("/member", control.DeleteMember)
 		}
+
 		admin := api.Group("/admin")
 		{
 			admin.GET("/users", control.GetAllUser)
@@ -77,6 +83,11 @@
 			admin.POST("/requests/reject", control.RejectPermissionRequest)
 			admin.POST("/requests/approve", control.ApprovePermissionRequest)
 		}
+
+		rNw := api.Group("/rNw")
+		{
+			rNw.POST("/request", control.InterpretUserRequest)
+		}
 	}
 }
 
Index: control/apply_for_table_auth.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package control\r\n\r\nimport (\r\n\t\"backend/models\"\r\n\t\"backend/mysql\"\r\n\t\"backend/response\"\r\n\r\n\t\"github.com/gin-gonic/gin\"\r\n)\r\n\r\nfunc ApplyForTableAuth(c *gin.Context) {\r\n\t//获取token中的申请用户uid\r\n\tvar pu_uid uint\r\n\tif data, ok := c.Get(\"pu_uid\"); !ok {\r\n\t\tresponse.Fail(c, nil, \"没有从token解析出所需信息\")\r\n\t\treturn\r\n\t} else {\r\n\t\tpu_uid = data.(uint)\r\n\t}\r\n\t//解析请求参数\r\n\ttype msg struct {\r\n\t\tProjectname string `json:\"projectname\"`\r\n\t\tTableName   string `json:\"tableName\"`\r\n\t\tAuthType    string `json:\"authType\"`\r\n\t}\r\n\tvar m msg\r\n\tif e := c.ShouldBindJSON(&m); e != nil {\r\n\t\tresponse.Fail(c, nil, \"提交事务时出错\")\r\n\t\treturn\r\n\t}\r\n\t//翻译权限等级\r\n\tvar prLevel uint\r\n\tswitch m.AuthType {\r\n\tcase \"只读\":\r\n\t\tprLevel = 1\r\n\tcase \"读写\":\r\n\t\tprLevel = 2\r\n\tcase \"无权限\":\r\n\t\tprLevel = 0\r\n\tdefault:\r\n\t\tresponse.Fail(c, nil, \"未知的权限等级\")\r\n\t\treturn\r\n\t}\r\n\t//查找目标表的主键\r\n\ttx := mysql.DB.Begin()\r\n\tvar result struct {\r\n\t\tPT_uid uint `gorm:\"column:PT_uid\" json:\"PT_uid\"`\r\n\t}\r\n\terr := tx.Raw(`\r\n\t\tSELECT ProjectTable.PT_uid FROM \r\n\t\t\t(SELECT ProjectUser.PU_uid FROM User LEFT JOIN ProjectUser ON User.U_uid=ProjectUser.U_uid WHERE User.U_username = ? ) T1\r\n\t\t\tLEFT JOIN ProjectTable on T1.PU_uid = ProjectTable.PU_uid\t\r\n\t\tWHERE ProjectTable.PT_name=?\r\n\t`, m.Projectname, m.TableName).First(&result).Error\r\n\tif err != nil {\r\n\t\ttx.Rollback()\r\n\t\tresponse.Fail(c, nil, \"查找表时出错\")\r\n\t\treturn\r\n\t}\r\n\tif prLevel > 0 {\r\n\t\tpr := models.PermissionRequest{PU_uid: pu_uid, PT_uid: result.PT_uid, PR_level: prLevel, PR_status: 1}\r\n\t\tif e := tx.Create(&pr).Error; e != nil {\r\n\t\t\ttx.Rollback()\r\n\t\t\tresponse.Fail(c, nil, \"插入请求信息时出错\")\r\n\t\t\treturn\r\n\t\t}\r\n\t} else {\r\n\t\terr = tx.Where(\"PU_uid = ? AND PT_uid = ?\", pu_uid, result.PT_uid).Delete(&models.Permission{}).Error\r\n\t\tif err != nil {\r\n\t\t\ttx.Rollback()\r\n\t\t\tresponse.Fail(c, nil, \"删除权限时出错\")\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\tif e := tx.Commit().Error; e != nil {\r\n\t\tresponse.Fail(c, nil, \"提交事务时出错\")\r\n\t\treturn\r\n\t}\r\n\tresponse.Success(c, nil, \"\")\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/control/apply_for_table_auth.go b/control/apply_for_table_auth.go
--- a/control/apply_for_table_auth.go	(revision 835c93b1a24981205dd013d55a884a19f2310ef1)
+++ b/control/apply_for_table_auth.go	(date 1718018648462)
@@ -19,9 +19,9 @@
 	}
 	//解析请求参数
 	type msg struct {
-		Projectname string `json:"projectname"`
-		TableName   string `json:"tableName"`
-		AuthType    string `json:"authType"`
+		projectName string `json:"projectName"`
+		tableName   string `json:"tableName"`
+		authType    string `json:"authType"`
 	}
 	var m msg
 	if e := c.ShouldBindJSON(&m); e != nil {
@@ -30,7 +30,7 @@
 	}
 	//翻译权限等级
 	var prLevel uint
-	switch m.AuthType {
+	switch m.authType {
 	case "只读":
 		prLevel = 1
 	case "读写":
@@ -51,7 +51,7 @@
 			(SELECT ProjectUser.PU_uid FROM User LEFT JOIN ProjectUser ON User.U_uid=ProjectUser.U_uid WHERE User.U_username = ? ) T1
 			LEFT JOIN ProjectTable on T1.PU_uid = ProjectTable.PU_uid	
 		WHERE ProjectTable.PT_name=?
-	`, m.Projectname, m.TableName).First(&result).Error
+	`, m.projectName, m.tableName).First(&result).Error
 	if err != nil {
 		tx.Rollback()
 		response.Fail(c, nil, "查找表时出错")
Index: control/get_token_user.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/control/get_token_user.go b/control/get_token_user.go
new file mode 100644
--- /dev/null	(date 1718019319773)
+++ b/control/get_token_user.go	(date 1718019319773)
@@ -0,0 +1,79 @@
+package control
+
+import (
+	"backend/models"
+	"backend/mysql"
+	"backend/response"
+	"github.com/gin-gonic/gin"
+)
+
+func InterpretUserRequest(c *gin.Context) {
+	var pu_uid uint
+
+	// ****************************************** 从 token 解析用户名、身份以及用户 id
+	if data, ok := c.Get("pu_uid"); !ok {
+		response.Fail(c, nil, "没有从token解析出所需信息")
+		return
+	} else {
+		pu_uid = data.(uint)
+	}
+	// ****************************************** 解析完毕
+
+	// ****************************************** 检查权限
+	var m struct {
+		projectName string `json:"projectName"`
+		tableName   string `json:"tableName"`
+		authType    string `json:"authType"`
+		sqlCommand  string `json:"sqLCommand"`
+	}
+	if e := c.ShouldBindJSON(&m); e != nil {
+		response.Fail(c, nil, "提交事务时出错")
+		return
+	}
+	// 翻译权限等级
+	var prLevel uint
+	switch m.authType {
+	case "只读":
+		prLevel = 1
+	case "读写":
+		prLevel = 2
+	case "无权限":
+		prLevel = 0
+	default:
+		response.Fail(c, nil, "未知的权限等级")
+		return
+	}
+	// ****************************************** 权限检查完毕
+
+	//查找目标表的主键
+	tx := mysql.DB.Begin()
+	var result struct {
+		PT_uid uint `gorm:"column:PT_uid" json:"PT_uid"`
+	}
+	err := tx.Raw(`
+		SELECT ProjectTable.PT_uid FROM 
+			(SELECT ProjectUser.PU_uid FROM User LEFT JOIN ProjectUser ON User.U_uid=ProjectUser.U_uid WHERE User.U_username = ? ) T1
+			LEFT JOIN ProjectTable on T1.PU_uid = ProjectTable.PU_uid	
+		WHERE ProjectTable.PT_name=?
+	`, m.projectName, m.tableName).First(&result).Error
+	if err != nil {
+		tx.Rollback()
+		response.Fail(c, nil, "查找表时出错")
+		return
+	}
+	if prLevel > 0 {
+		pr := models.PermissionRequest{PU_uid: pu_uid, PT_uid: result.PT_uid, PR_level: prLevel, PR_status: 1}
+		if e := tx.Create(&pr).Error; e != nil {
+			tx.Rollback()
+			response.Fail(c, nil, "插入请求信息时出错")
+			return
+		}
+	} else {
+		err = tx.Where("PU_uid = ? AND PT_uid = ?", pu_uid, result.PT_uid).Delete(&models.Permission{}).Error
+		if err != nil {
+			tx.Rollback()
+			response.Fail(c, nil, "删除权限时出错")
+			return
+		}
+	}
+}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"ALL\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"88ca0ddd-a994-4817-b736-86518cc56b5b\" name=\"Changes\" comment=\"新增sql解析\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"GOROOT\" url=\"file://$PROJECT_DIR$/../../../GO/go1.20.6.windows-amd64/go\" />\r\n  <component name=\"Git.Merge.Settings\">\r\n    <option name=\"BRANCH\" value=\"origin/main\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">\r\n    <option name=\"selectedUrlAndAccountId\">\r\n      <UrlAndAccount>\r\n        <option name=\"accountId\" value=\"9e1c429d-c0a5-4834-a7e8-9313702dedc6\" />\r\n        <option name=\"url\" value=\"https://github.com/Sober111115/Software-Engineering-Comprehensive-Training.git\" />\r\n      </UrlAndAccount>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 8\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2hdGYwA9qpwGDTX9XKoEoQN4j6f\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Go Build.go build main.go.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.go.formatter.settings.were.checked&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.go.migrated.go.modules.settings&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.go.modules.automatic.dependencies.download&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.go.modules.go.list.on.any.changes.was.set&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;go.import.settings.migrated&quot;: &quot;true&quot;,\r\n    &quot;go.sdk.automatically.set&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;E:/WorkSpace/go_Code/Software-Engineering-Comprehensive-Training&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"go build main.go\" type=\"GoApplicationRunConfiguration\" factoryName=\"Go Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"backend\" />\r\n      <working_directory value=\"$PROJECT_DIR$\" />\r\n      <kind value=\"FILE\" />\r\n      <package value=\"backend\" />\r\n      <directory value=\"$PROJECT_DIR$\" />\r\n      <filePath value=\"$PROJECT_DIR$/main.go\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Go Build.go build main.go\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-gosdk-33c477a475b1-e0158606a674-org.jetbrains.plugins.go.sharedIndexes.bundled-GO-241.15989.157\" />\r\n        <option value=\"bundled-js-predefined-1d06a55b98c1-91d5c284f522-JavaScript-GO-241.15989.157\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VgoProject\">\r\n    <settings-migrated>true</settings-migrated>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 835c93b1a24981205dd013d55a884a19f2310ef1)
+++ b/.idea/workspace.xml	(date 1718545845336)
@@ -4,13 +4,27 @@
     <option name="autoReloadType" value="ALL" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="88ca0ddd-a994-4817-b736-86518cc56b5b" name="Changes" comment="新增sql解析" />
+    <list default="true" id="88ca0ddd-a994-4817-b736-86518cc56b5b" name="Changes" comment="sql">
+      <change afterPath="$PROJECT_DIR$/control/get_token_user.go" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/Software-Engineering-Comprehensive-Training.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/backend.iml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/control/apply_for_table_auth.go" beforeDir="false" afterPath="$PROJECT_DIR$/control/apply_for_table_auth.go" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/logic/authMiddleware.go" beforeDir="false" afterPath="$PROJECT_DIR$/logic/authMiddleware.go" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/router/router.go" beforeDir="false" afterPath="$PROJECT_DIR$/router/router.go" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
   </component>
-  <component name="GOROOT" url="file://$PROJECT_DIR$/../../../GO/go1.20.6.windows-amd64/go" />
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Go File" />
+      </list>
+    </option>
+  </component>
+  <component name="GOROOT" url="file://$PROJECT_DIR$/../../../Go" />
   <component name="Git.Merge.Settings">
     <option name="BRANCH" value="origin/main" />
   </component>
@@ -30,6 +44,9 @@
       </UrlAndAccount>
     </option>
   </component>
+  <component name="MarkdownSettingsMigration">
+    <option name="stateVersion" value="1" />
+  </component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 8
 }</component>
@@ -43,22 +60,34 @@
   </component>
   <component name="PropertiesComponent">{
   &quot;keyToString&quot;: {
+    &quot;DefaultGoTemplateProperty&quot;: &quot;Go File&quot;,
     &quot;Go Build.go build main.go.executor&quot;: &quot;Run&quot;,
     &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
     &quot;RunOnceActivity.go.formatter.settings.were.checked&quot;: &quot;true&quot;,
     &quot;RunOnceActivity.go.migrated.go.modules.settings&quot;: &quot;true&quot;,
     &quot;RunOnceActivity.go.modules.automatic.dependencies.download&quot;: &quot;true&quot;,
     &quot;RunOnceActivity.go.modules.go.list.on.any.changes.was.set&quot;: &quot;true&quot;,
+    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
     &quot;git-widget-placeholder&quot;: &quot;main&quot;,
     &quot;go.import.settings.migrated&quot;: &quot;true&quot;,
     &quot;go.sdk.automatically.set&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;E:/WorkSpace/go_Code/Software-Engineering-Comprehensive-Training&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/10788&quot;,
     &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
     &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
     &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;
   }
 }</component>
   <component name="RunManager">
+    <configuration default="true" type="GoApplicationRunConfiguration" factoryName="Go Application">
+      <module name="backend" />
+      <working_directory value="$PROJECT_DIR$" />
+      <go_parameters value="-i" />
+      <kind value="PACKAGE" />
+      <package value="Software-Engineering-Comprehensive-Training" />
+      <directory value="$PROJECT_DIR$" />
+      <filePath value="$PROJECT_DIR$" />
+      <method v="2" />
+    </configuration>
     <configuration name="go build main.go" type="GoApplicationRunConfiguration" factoryName="Go Application" temporary="true" nameIsGenerated="true">
       <module name="backend" />
       <working_directory value="$PROJECT_DIR$" />
@@ -66,6 +95,17 @@
       <package value="backend" />
       <directory value="$PROJECT_DIR$" />
       <filePath value="$PROJECT_DIR$/main.go" />
+      <method v="2" />
+    </configuration>
+    <configuration default="true" type="GoTestRunConfiguration" factoryName="Go Test">
+      <module name="backend" />
+      <working_directory value="$PROJECT_DIR$" />
+      <go_parameters value="-i" />
+      <kind value="DIRECTORY" />
+      <package value="Software-Engineering-Comprehensive-Training" />
+      <directory value="$PROJECT_DIR$" />
+      <filePath value="$PROJECT_DIR$" />
+      <framework value="gotest" />
       <method v="2" />
     </configuration>
     <recent_temporary>
@@ -85,6 +125,11 @@
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
+  </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="新增sql解析" />
+    <MESSAGE value="sql" />
+    <option name="LAST_COMMIT_MESSAGE" value="sql" />
   </component>
   <component name="VgoProject">
     <settings-migrated>true</settings-migrated>
Index: logic/authMiddleware.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package logic\r\n\r\nimport (\r\n\t\"net/http\"\r\n\r\n\t\"github.com/gin-gonic/gin\"\r\n)\r\n\r\nfunc AuthMiddleware() gin.HandlerFunc {\r\n\treturn func(c *gin.Context) {\r\n\t\t// fmt.Println(\"触发中间件\")\r\n\t\t//获取authorization header\r\n\t\ttokenString := c.GetHeader(\"Authorization\")\r\n\r\n\t\t//验证token格式\r\n\t\t// if tokenString == \"\" || !strings.HasPrefix(tokenString, \"Bearer\") {\r\n\t\t// \tc.JSON(http.StatusUnauthorized, gin.H{\"code\": 401, \"msg\": \"权限不足\"})\r\n\t\t// \tc.Abort()\r\n\t\t// \treturn\r\n\t\t// }\r\n\t\t// tokenString = tokenString[7:]\r\n\r\n\t\ttoken, claims, err := ParseToken(tokenString)\r\n\t\tif err != nil || !token.Valid {\r\n\t\t\tc.JSON(http.StatusUnauthorized, gin.H{\"code\": 401, \"msg\": \"token无效\"})\r\n\t\t\tc.Abort()\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t//验证通过后获取claims中的Id\r\n\t\tuserId := claims.UserId\r\n\t\tidentity := claims.Identity\r\n\t\tpu_uid := claims.PU_uid\r\n\t\t// var user models.User\r\n\t\t// mysql.DB.First(&user, userId) //默认用户存在\r\n\t\tc.Set(\"userId\", userId)\r\n\t\tc.Set(\"identity\", identity)\r\n\t\tc.Set(\"pu_uid\", pu_uid)\r\n\t\tc.Next()\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/logic/authMiddleware.go b/logic/authMiddleware.go
--- a/logic/authMiddleware.go	(revision 835c93b1a24981205dd013d55a884a19f2310ef1)
+++ b/logic/authMiddleware.go	(date 1718009888567)
@@ -1,8 +1,7 @@
 package logic
 
 import (
-	"net/http"
-
+	"backend/response"
 	"github.com/gin-gonic/gin"
 )
 
@@ -22,7 +21,7 @@
 
 		token, claims, err := ParseToken(tokenString)
 		if err != nil || !token.Valid {
-			c.JSON(http.StatusUnauthorized, gin.H{"code": 401, "msg": "token无效"})
+			response.Fail(c, gin.H{"code": 401, "data": ""}, "token无效")
 			c.Abort()
 			return
 		}
diff --git a/.idea/Software-Engineering-Comprehensive-Training.iml b/.idea/backend.iml
rename from .idea/Software-Engineering-Comprehensive-Training.iml
rename to .idea/backend.iml
